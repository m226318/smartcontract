# make map address, #tickets
#add tickets whenever they buy more to their address in map

#at end of aution, create array[numticketstotal]
#then fill with map, add num of address by num of tickets bought
#random choose piece of array/ numer range (tickettotal)
#payout 

 #inspiration from https://vyper.readthedocs.io/en/stable/vyper-by-example.html


owner: public(address)
winner: public(address)
auctionStart: public(uint256)
auctionEnd: public(uint256)
ticketprice: public(uint256)

 
# Current state of auction
currentpool: public(uint256)
ticketcount: public(uint256)

ended: public(bool)

# MAP of the addresses and one address per ticket. 
ticketMap: public(HashMap[address, uint256])

@external
def __init__(_beneficiary: address, _auction_start: uint256, _bidding_time: uint256, _ticket_price: uint256):
    self.owner = _beneficiary
    self.auctionStart = _auction_start  # auction start time can be in the past, present or future
    self.auctionEnd = self.auctionStart + _bidding_time
    self.ticketprice= _ticket_price
    assert block.timestamp < self.auctionEnd # auction end time should be in the future

@external
@payable
def buyticket():
    # Check if bidding period has started.
    assert block.timestamp >= self.auctionStart
    # Check if bidding period is over.
    assert block.timestamp < self.auctionEnd
    # Check if bid is high enough to buy ticket
    assert msg.value > self.ticketprice
    # Track new high bid
    self.currentpool+= msg.value
    self.ticketcount += msg.value % self.ticketprice
    
    #add tickets bought to sender address
    self.ticketMap[msg.sender]+= msg.value % self.ticketprice
 

@external
@view
def show():
 #return time/ tick/ total
 print(block.timestamp)
 print(self.ticketcount)
 print(self.currentpool)

 
@external
def endAuction():
    # 1. Conditions
    # Check if auction endtime has been reached
    assert block.timestamp >= self.auctionEnd
    # Check if this function has already been called
    assert not self.ended

    # 2. Effects
    self.ended = True

    # 3. Interaction
    
    #make array of addresses
    tic: DynArray[address, self.ticketcount]
    
    #add to array
    bought = ticketMap.values()
    names = ticketMap.keys()
    for i in range(ticketMap.size()):
      for j in range(names[i]):
        tic[names[i]]
        
    rand: uint256
    rand = block.timestamp % self.ticketcount
    
    self.winner = tic[self.rand]

    send(self.owner, self.currentpool*.10)
    send(self.winner, self.currentpool*.9)
